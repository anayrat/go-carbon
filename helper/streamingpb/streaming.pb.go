// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helper/streamingpb/streaming.proto

package streamingpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import carbonapi_v3_pb "github.com/go-graphite/protocol/carbonapi_v3_pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarbonStreamClient is the client API for CarbonStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarbonStreamClient interface {
	RenderStream(ctx context.Context, in *carbonapi_v3_pb.MultiFetchRequest, opts ...grpc.CallOption) (CarbonStream_RenderStreamClient, error)
}

type carbonStreamClient struct {
	cc *grpc.ClientConn
}

func NewCarbonStreamClient(cc *grpc.ClientConn) CarbonStreamClient {
	return &carbonStreamClient{cc}
}

func (c *carbonStreamClient) RenderStream(ctx context.Context, in *carbonapi_v3_pb.MultiFetchRequest, opts ...grpc.CallOption) (CarbonStream_RenderStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CarbonStream_serviceDesc.Streams[0], "/streamingpb.CarbonStream/RenderStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &carbonStreamRenderStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CarbonStream_RenderStreamClient interface {
	Recv() (*carbonapi_v3_pb.FetchResponse, error)
	grpc.ClientStream
}

type carbonStreamRenderStreamClient struct {
	grpc.ClientStream
}

func (x *carbonStreamRenderStreamClient) Recv() (*carbonapi_v3_pb.FetchResponse, error) {
	m := new(carbonapi_v3_pb.FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarbonStreamServer is the server API for CarbonStream service.
type CarbonStreamServer interface {
	RenderStream(*carbonapi_v3_pb.MultiFetchRequest, CarbonStream_RenderStreamServer) error
}

func RegisterCarbonStreamServer(s *grpc.Server, srv CarbonStreamServer) {
	s.RegisterService(&_CarbonStream_serviceDesc, srv)
}

func _CarbonStream_RenderStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(carbonapi_v3_pb.MultiFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CarbonStreamServer).RenderStream(m, &carbonStreamRenderStreamServer{stream})
}

type CarbonStream_RenderStreamServer interface {
	Send(*carbonapi_v3_pb.FetchResponse) error
	grpc.ServerStream
}

type carbonStreamRenderStreamServer struct {
	grpc.ServerStream
}

func (x *carbonStreamRenderStreamServer) Send(m *carbonapi_v3_pb.FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CarbonStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamingpb.CarbonStream",
	HandlerType: (*CarbonStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RenderStream",
			Handler:       _CarbonStream_RenderStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helper/streamingpb/streaming.proto",
}

func init() {
	proto.RegisterFile("helper/streamingpb/streaming.proto", fileDescriptor_streaming_d37f6b9bfb5b307d)
}

var fileDescriptor_streaming_d37f6b9bfb5b307d = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xca, 0x48, 0xcd, 0x29,
	0x48, 0x2d, 0xd2, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0x2f, 0x48, 0x42, 0xb0,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8, 0x91, 0x24, 0xa5, 0x5c, 0xd3, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0x75, 0xd3, 0x8b, 0x12, 0x0b, 0x32, 0x32,
	0x4b, 0x52, 0xf5, 0xc1, 0x4a, 0x93, 0xf3, 0x73, 0xf4, 0x93, 0x13, 0x8b, 0x92, 0xf2, 0xf3, 0x12,
	0x0b, 0x32, 0xe3, 0xcb, 0x8c, 0xe3, 0x0b, 0x92, 0xd0, 0xf9, 0x10, 0x33, 0x8d, 0xd2, 0xb8, 0x78,
	0x9c, 0xc1, 0x12, 0xc1, 0x60, 0xb3, 0x85, 0xc2, 0xb8, 0x78, 0x82, 0x52, 0xf3, 0x52, 0x52, 0x8b,
	0xa0, 0x7c, 0x25, 0x3d, 0x74, 0x7d, 0xbe, 0xa5, 0x39, 0x25, 0x99, 0x6e, 0xa9, 0x25, 0xc9, 0x19,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x72, 0x18, 0x6a, 0xa0, 0xd2, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x06, 0x8c, 0x4e, 0x3c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x12, 0x1b, 0xd8, 0x72, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x71, 0xa1, 0x89, 0xf6, 0x00, 0x00, 0x00,
}
